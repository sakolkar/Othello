-----------------------------
-----  PYGAME OTHELLO  ------
-----------------------------

-----------------------------
CMPUT 275 - PROJECT (Wed/Fri)
-----------------------------
Satyen Akolkar
Justin Aardema

Overview:
The aim of this project is to implement the game 'Othello' using python and the
pygame engine. The final demo should be a working version of the game where the
user can play versus the computer ai in a Ubuntu 14.04 Linux environment. The
game would begin in turns where the first player is determined randomly. The ai
should determine the best outcome for its turn and play accordingly. The game
should identify a when a player (user or ai) cannot make any move, and when the
game is finished. The game should announce the winner.

Milestones:
1.  Create a board and peices: (March 16)
        This milestone aims to generate a board and various peices on the board
        using the pygame engine. The peices do not need to be interactable yet.
        This step is mainly to create an interface that will be made
        interactable in the next few steps.
        
2.  Capture User Input by using mouse: (March 20)
        This milestone aims to introduce interactability to the user interface.
        The location of mouse clicks will generate a corresponding peice on the
        board and the program should be able to recognize the new peice and its
        various attributes. These attributes should be printed in the console 
        window. The new piece should be added to a data structure that can be
        passed to the algorithm for calculating best outcome.
        
3.  Algorithm for determining best outcome for a user: (March 25)
        This milestone aims to create an algorithm that can search the data
        structure that represents the current state of the board and searches
        for the move that would correspond to the most number of peices being
        changed colour. This can be demoed by printing the coordinate of the
        best move on the console window.

4.  Turn based playing: (March 30)
        Implement the program to wait for each user to make a move. Create an
        algorithm that can determine when a user cannot make any moves (no tiles
        will switch colour). Also make an algorithm that determines if the game
        is over by the enitre board being filled.
        
5.  Testing: (April 6)
        play the game and test for irregularities. test edge cases and
        improbable input such as multiple clicks within a single turn.
